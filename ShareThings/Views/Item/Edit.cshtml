@model ShareThings.Models.Item

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.id)

    if (ShareThings.Content.SessionThings.IsUserAdmin)
    {
        <div class="editor-label">
            Owner of Item
        </div>
        <div class="editor-field">
            @{
        List<ShareThings.Models.User> usrs = ViewBag.Users;
        List<SelectListItem> items = new List<SelectListItem>();
        foreach (ShareThings.Models.User usr in usrs)
        {
            items.Add(new SelectListItem()
            {
                Text = usr.name + " (" + usr.email + ")",
                Value = usr.id.ToString(),
                Selected = (usr.id == Model.owner_id)
            });
        }
            }
            @Html.DropDownList("owner_id", items, new { @class = "ddlInput" })
            @Html.ValidationMessageFor(model => model.owner_id)
        </div>
    }

    <div class="editor-label">
        <label>Item Name</label>
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => model.name, new { @class = "txtInput" })
        @Html.ValidationMessageFor(model => model.name)
    </div>

    <div class="editor-label">
        <label>Description</label>
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => model.description, new { @class = "txtInput" })
        @Html.ValidationMessageFor(model => model.description)
    </div>

    <div class="editor-label">
        <label>Condition</label>
    </div>
    <div class="editor-field">
        @{
            List<SelectListItem> itm = new List<SelectListItem>();
            itm.Add(new SelectListItem(){
                Text = "New",
                Value = "New",
                Selected = (Model.condition == "New")
            });
            itm.Add(new SelectListItem(){
                Text = "Like New",
                Value = "Like New",
                Selected = (Model.condition == "Like New")
            });
            itm.Add(new SelectListItem(){
                Text = "Used",
                Value = "Used",
                Selected = (Model.condition == "Used")
            });
            itm.Add(new SelectListItem(){
                Text = "Heavily Used",
                Value = "Heavily Used",
                Selected = (Model.condition == "Heavily Used")
            });
            itm.Add(new SelectListItem(){
                Text = "Unrecognizable",
                Value = "Unrecognizable",
                Selected = (Model.condition == "Unrecognizable")
            });
        }
        @Html.DropDownListFor(model => model.condition, itm, new { @class = "ddlInput" })
        @Html.ValidationMessageFor(model => model.condition)
    </div>

    <div class="editor-label">
        <label>Details</label>
    </div>
    <div class="editor-field">
        @Html.TextBoxFor(model => model.detail, new { @class = "txtInput" })
        @Html.ValidationMessageFor(model => model.detail)
    </div>
    <div class="editor-label">
        <label>Category</label>
    </div>
    <div class="editor-field">
        @{
            List<SelectListItem> sli = new List<SelectListItem>();
            List<List<ShareThings.Models.Category>> cats = ViewBag.Categories;
            foreach (List<ShareThings.Models.Category> ssmodels in cats)
            {
                sli.Add(new SelectListItem()
                {
                    Text = ssmodels[0].name,
                    Value = ssmodels[0].id.ToString()
                });
                ssmodels.RemoveAt(0);
                foreach (ShareThings.Models.Category c in ssmodels)
                {
                    sli.Add(new SelectListItem()
                    {
                        Text = "  -" + c.name,
                        Value = c.id.ToString(),
                        Selected = (c.id == Model.category_id)
                    });
                }
            }
        
        }        
        @Html.DropDownListFor(model => model.category_id, sli, new { @class = "ddlInput" })
    </div>

    <div class="editor-field">
        @Html.EditorFor(model => model.isPublic)
        <label>Visible to Public</label>
        @Html.ValidationMessageFor(model => model.isPublic)
    </div>

    <p>
        <input type="submit" value="Save" />
    </p>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
